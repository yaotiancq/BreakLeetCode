# Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] 
# such that i < j < k and nums[i] < nums[k] < nums[j].
# Return true if there is a 132 pattern in nums, otherwise, return false.

# Example 1:
# Input: nums = [1,2,3,4]
# Output: false
# Explanation: There is no 132 pattern in the sequence.

# Example 2:
# Input: nums = [3,1,4,2]
# Output: true
# Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

# Example 3:
# Input: nums = [-1,3,2,0]
# Output: true
# Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

class Solution:
"""
132 pattern
Build a descent Monotonic Stack from the end of nums to the beginning of nums. We need 2 to be as large as possible.
Why this work?
132 pattern will pop out 2 because 3 is larger than 2. We keep record of the last poped element. After while loop and stack append process, 2 was
poped out of stack and 3 was pushed in stack, last_pop was set to 2. Next loop, nums[i] was compared to 2, if nums[i] is smaller, then, the 132 pattern
exists. 
If nums[i] is larger than 2 and 3, for example, 4,  4 will enter in while loop. 3 will be poped out and last_pop was set to 3. 4 is the peak of 
stack. last_pop become larger, so it is easier to meet some element which is smaller than it. 
If nums[i] is larger than 2 but smaller than 3, for example, 2.5, 2.5 won't enter in while loop. The last_pop won't updated. 2.5 will become the new peak of stack.
Then, we will see the next nums[i] is smaller than 2 or not. 
Why this work?
132 pattern, we need 2 to be as larger as possible. In this process, stack will absorb larger element and pop out smaller ones, stack and last_pop will
track 3 and 2 respectively, 3 is the largest ever meet, and 2 is the preview largest element. If there is an element meet 132 pattern, it will return True. If not, 
there is no element meet 132 pattern, and 3 and 2 will get larger and larger.
Where is the greedy consideration?
In the process of matching 32 pattern, we consider 3 as the anchor point. 2 is not the only one matching 32 pattern. 31 or 30 match 32 pattern too. But we choose
2 which is the previews largest element to be our 2. So that we can have best chance to find 1 on the left of anchor point 3. If we can not find one 1 under
2, then 132 pattern do not exist at anchor point 3, and we should keep moving left to find larger anchor point 3 and 2. 
"""
    def find132pattern(self, nums: List[int]) -> bool:
        stack=[]
        last_pop=float('-inf')
        for i in range(len(nums)-1,-1,-1):
            if nums[i]<last_pop:
                return True
            while stack and stack[-1]<nums[i]:
                last_pop=stack.pop()    
            stack.append(nums[i])        
        return False
