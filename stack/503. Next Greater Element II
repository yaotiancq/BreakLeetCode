# Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), 
# return the next greater number for every element in nums.
# The next greater number of a number x is the first greater number to its traversing-order next in the array, 
# which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

# Example 1:
# Input: nums = [1,2,1]
# Output: [2,-1,2]
# Explanation: The first 1's next greater number is 2; 
# The number 2 can't find next greater number. 
# The second 1's next greater number needs to search circularly, which is also 2.

class Solution:
"""
descent Monotonic stack solution
The loop of itself can be done with nums[i%n]
Use stack to record the index of num in nums, but comparision logic is based on num, not index.
So that we can update ans within every stack maintanence loop.
"""
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        n=len(nums)
        stack=[]
        ans=[-1]*n
        
        for i in range(2*n):
            k=i%n
            while stack and nums[stack[-1]]<nums[k]:
                idx=stack.pop()
                ans[idx]=nums[k]
            stack.append(k)

        return ans
