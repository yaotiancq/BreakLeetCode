# Given two integer arrays pushed and popped each with distinct values, return true 
# if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

# Example 1:
# Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
# Output: true
# Explanation: We might do the following sequence:
# push(1), push(2), push(3), push(4),
# pop() -> 4,
# push(5),
# pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

class Solution:
"""
Give a stack nums, if the order is right, after we excute push and pop, the nums should be empty.
What is more, if the push and pop could not excute at some point, it must return false.
When should it return false? the peak of nums can not match the popped[0] and there is no more choice from pushed.
If and only if pushed and popped are all excuted, meaning they are empty, it will return true.
"""
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        nums=[]
        while pushed or popped:
            if pushed==[] and popped[0]!=nums[-1]:
                return False
            val=pushed.pop(0)
            nums.append(val)
            while nums!=[] and nums[-1]==popped[0]:
                nums.pop()
                popped.pop(0)
        return True
