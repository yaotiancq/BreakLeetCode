# A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

# For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
# A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

# Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

# Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

class Solution:
"""
When using stack to store parentheses, the corresponding parentheses will pop out of the stack.
The character of this process is that the when pushing the left parenthese in the stack, if the stack is empty, this left parenthese belongs to 
the outmost parentheses. If not, this left parenthese belongs to the innter parentheses needed to add to ans. When pushing the right parenthese, 
after poping out the left parenthese, if the stack is empty, then the right parenthese belongs to the outter parentheses. Otherwise, it belongs to the 
inner parenthese needed to add to ans.
"""
    def removeOuterParentheses(self, s: str) -> str:
        stack=[]
        ans=''
        for c in s:
            if c=='(':
                if len(stack)>0:
                    ans+=c
                stack.append(c)
            else:
                stack.pop()
                if len(stack)>0:
                    ans+=c
        return ans
