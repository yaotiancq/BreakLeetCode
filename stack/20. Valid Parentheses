# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',
# determine if the input string is valid.

# An input string is valid if:

# Open brackets must be closed by the same type of brackets.
# Open brackets must be closed in the correct order.
# Every close bracket has a corresponding open bracket of the same type.

class Solution:
"""
Push onto the stack when encountering a left parenthesis. When encountering a right parenthesis, 
if the top of the stack is the corresponding left parenthesis, pop the top element from the stack. 
Finally, check if the stack is empty. If it is empty, the parentheses are matched.
"""
    def isValid(self, s: str) -> bool:

        stack=[]
        for c in s:
            if c=='(' or c=='[' or c=='{':
                stack.append(c)
            else:
                if not stack:
                    return False
                else:
                    if stack[-1]=='(' and c==')' or stack[-1]=='[' and c==']' or stack[-1]=='{' and c=='}':
                        stack.pop()
                    else:
                        stack.append(c)

        if not stack:
            return True
        return False
