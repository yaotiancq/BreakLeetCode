# Given a string s representing a valid expression, implement a basic calculator to evaluate it, 
# and return the result of the evaluation.
# Note: You are not allowed to use any built-in function which evaluates strings
# as mathematical expressions, such as eval().

# Example 1:
# Input: s = "1 + 1"
# Output: 2

# Example 2:
# Input: s = " 2-1 + 2 "
# Output: 3

# Example 3:
# Input: s = "(1+(4+5+2)-3)+(6+8)"
# Output: 23

class Solution:
"""
O(n) time complexity. 
Use stack to store the preview merged value and "current" sign. 
The initial sign is 1, because s begin with "(" is considered a "+" before "("
If meet " ", pass
If meet "+" or "-", change the current sign
If meet digit, merge with current value.
If meet "(", push in stack to store the current value and begin the next calculation.
If meet ")", use current value to be the value of current "()" section, pop the preview stored value out of stack and merge with it.
"""
    def calculate(self, s: str) -> int:
        stack=[]
        i=0
        res=0
        sign=1
        while i<len(s):
            if s[i]==' ':
                i+=1
                continue
            if s[i].isdigit():
                val=int(s[i])
                j=i+1
                while j<len(s) and s[j].isdigit():
                    val=val*10+int(s[j])
                    j+=1
                i=j
                res+=sign*val
            elif s[i]=='+':
                sign=1
                i+=1
            elif s[i]=='-':
                sign=-1
                i+=1
            elif s[i]=='(':
                stack.append(res)
                stack.append(sign)
                res=0
                sign=1
                i+=1
            elif s[i]==')':
                res=stack.pop()*res+stack.pop()
                i+=1

        return res
