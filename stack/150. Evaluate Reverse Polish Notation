# You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
# Evaluate the expression. Return an integer that represents the value of the expression.

# Note that:
# The valid operators are '+', '-', '*', and '/'.
# Each operand may be an integer or another expression.
# The division between two integers always truncates toward zero.
# There will not be any division by zero.
# The input represents a valid arithmetic expression in a reverse polish notation.
# The answer and all the intermediate calculations can be represented in a 32-bit integer.
 
# Example 1:
# Input: tokens = ["2","1","+","3","*"]
# Output: 9
# Explanation: ((2 + 1) * 3) = 9

# Example 2:
# Input: tokens = ["4","13","5","/","+"]
# Output: 6
# Explanation: (4 + (13 / 5)) = 6

# Example 3:
# Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
# Output: 22
# Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
# = ((10 * (6 / (12 * -11))) + 17) + 5
# = ((10 * (6 / -132)) + 17) + 5
# = ((10 * 0) + 17) + 5
# = (0 + 17) + 5
# = 17 + 5
# = 22

class Solution:
"""
Basic structure is operan1, operan2, token. If meet +-*/, pop the operand from stack, push the res of eval("operan1 operan2 token").
Go on with this process.
If meet -, the process needed to be more specific.  
In python:
-1//10=-1
1//10=0
But in this problem, it need to be -1*(1//10)

Another issue is eval() is much slower than integer operation. The faster method is transfer string into integer first.

"""
    def evalRPN(self, tokens: List[str]) -> int:
        stack=[]
        for token in tokens:
            if token not in '+-*/':
                stack.append(token)
            else:
                operand2=int(stack.pop())
                operand1=int(stack.pop())
                if token=='/':
                    if operand1<0 and operand2>0:
                        res=-1*((-1*operand1)//operand2)
                    elif operand2<0 and operand1>0:
                        res=-1*(operand1//(-1*operand2))
                    else:
                        res=operand1//operand2
                else:
                    if token=="+":
                        res=operand1+operand2
                    elif token=="-":
                        res=operand1-operand2
                    else:
                        res=operand1*operand2
                stack.append(str(res))

        return int(stack[-1])
