# Implement a last-in-first-out (LIFO) stack using only two queues. 
# The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

from collections import deque
"""
双端队列 Double-Ended queue

Constructor:
deque([iterable[, maxlen]])

append(x)
appendleft(x)

pop()
popleft()

extend(iterable)
extendleft(iterable)

rotate(n): Rotate the deque n steps to the right. If n is negative, rotate to the left.

remove(value): Remove the first match value from the queue

count(value)

copy(): shallow copy

clear()

maxlen

dq[0] access front element，dq[-1] access rear element
dq[1:3] return new deque

reverse()
"""
class MyStack:

    def __init__(self):
        self.q=deque()

    def push(self, x: int) -> None:
        self.q.append(x)

    def pop(self) -> int:
        return self.q.pop()

    def top(self) -> int:
        return self.q[-1]

    def empty(self) -> bool:
        return len(self.q)==0

from queue import Queue
"""
deque is much more convenience.
If use two FIFO queue to implement FILO stack, we need to change the order of the element of queue. 
The later element should be in front of the earlier element. In order to do that, we need to pop out the earlier element and use the second queue
as a buffer to store the poped out element, then push in the new element to the first queue. Then push bach the ealier element and clear the 
buffer.
top() function is not simple to implement. There is no method for a queue to get the front element. So we need to pop it out and restore the rest
element.
"""
class MyStack:

    def __init__(self):
        self.q1=Queue()
        self.q2=Queue()

    def push(self, x: int) -> None:
        while not self.q1.empty():
            val=self.q1.get()
            self.q2.put(val)
        self.q1.put(x)
        while not self.q2.empty():
            val=self.q2.get()
            self.q1.put(val)

    def pop(self) -> int:
        return self.q1.get()

    def top(self) -> int:
        top_element=self.q1.get()
        self.q2.put(top_element)
        while not self.q1.empty():
            val=self.q1.get()
            self.q2.put(val)
        while not self.q2.empty():
            val=self.q2.get()
            self.q1.put(val)
        return top_element

    def empty(self) -> bool:
        return self.q1.empty()

