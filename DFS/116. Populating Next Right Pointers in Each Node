# You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. 
# The binary tree has the following definition:

# struct Node {
#   int val;
#   Node *left;
#   Node *right;
#   Node *next;
# }
# Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.
# Initially, all next pointers are set to NULL.

# Example 1:
# Input: root = [1,2,3,4,5,6,7]
# Output: [1,#,2,3,#,4,5,6,7,#]
# Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, 
# just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':

"""
Core algorithm is left child point to right child, right child point to root.next.left child or point to None if root.next is None.
And it need to calculate from the top, so, pre-order traversal is good choice.
"""
        def dfs(root):
            if not root or root.left is None and root.right is None:
                return

            root.left.next=root.right

            if root.next!=None:
                root.right.next=root.next.left
            else:
                root.right.next=None

            self.connect(root.left)
            self.connect(root.right)

        node=root
        dfs(node)

        return root
