# Given an m x n integers matrix, return the length of the longest increasing path in matrix.

# From each cell, you can either move in four directions: left, right, up, or down. 
# You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

# Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
# Output: 4
# Explanation: The longest increasing path is [1, 2, 6, 9].

"""
The key is how to design its DFS function and its pruning strategy.
The key pruning strategy is to use a cache to record the lenght of longest path along with the process of DFS.
The first thing we should design is a recursive call inside a for loop of 4 directions. And the call of recursive fucntion should under condition, which 
include boarder restriction, ascending restriction.
Because we need to know every node's lenght of longest path in the process of DFS. So, we can design the DFS function to have a return. It is better return
the length of longest path.
The length of longest path decided by current element's surrounding elements' length of longest path. If one of the surrounding element's length of longest path has been filled
in cache. Then, the value is at least 1(because initial value is 0, and 1 is the smallest value if it has been DFS in). If this surrounding element has been DFS in, 
we don't need to DFS in it second time. We just return its values plus 1 as our current element's LLP(length of longest path). This is the most important pruning 
stategy. But this is just one direction, there might be another direction has larger value. So, we set a max() in for loop to get the largest value.

DFS will do real work when it reach leaf. It perfectly fit our purpose. We need to mark the largest number in path as 1, and plus one on each node back to the start point.
So, we set cache[i][j] in DFS function after recursive call. This will excute when DFS in this layer is finished and ready to return.
"""
class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:

        def search_path(i, j):
            if cache[i][j] > 0:
                return cache[i][j]
            count = 1
            for di, dj in [(-1, 0),(0, 1),(1, 0),(0, -1)]:
                ni,nj = i+di, j+dj
                if 0 <=ni<len(matrix) and 0<=nj<len(matrix[0]) and matrix[i][j]<matrix[ni][nj]:
                    count = max(count, search_path(ni, nj) + 1)
            cache[i][j] = count
            return count

        cache = [[0] * len(matrix[0]) for _ in range(len(matrix))]
        res = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                search_path(i, j)
                res = max(res, cache[i][j])
        return res

# [[0,1,2,3,4,5,6,7,8,9],
# [19,18,17,16,15,14,13,12,11,10],
# [20,21,22,23,24,25,26,27,28,29],
# [39,38,37,36,35,34,33,32,31,30],
# [40,41,42,43,44,45,46,47,48,49],
# [59,58,57,56,55,54,53,52,51,50],
# [60,61,62,63,64,65,66,67,68,69],
# [79,78,77,76,75,74,73,72,71,70],
# [80,81,82,83,84,85,86,87,88,89],
# [99,98,97,96,95,94,93,92,91,90],
# [100,101,102,103,104,105,106,107,108,109],
# [119,118,117,116,115,114,113,112,111,110],
# [120,121,122,123,124,125,126,127,128,129],
# [139,138,137,136,135,134,133,132,131,130],
# [0,0,0,0,0,0,0,0,0,0]]
