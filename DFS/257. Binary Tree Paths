# Given the root of a binary tree, return all root-to-leaf paths in any order.
# A leaf is a node with no children.

# Example 1:
# Input: root = [1,2,3,null,5]
# Output: ["1->2->5","1->3"]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""
String is not a alternable object, so it automatically copy because of value paropagation.
"""
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        
        def dfs(root, ans, t):

            if not root:
                return 
            
            t+="->"+str(root.val)
            if root.left is None and root.right is None:
                ans.append(t[2:])

            dfs(root.left, ans, t)
            dfs(root.right, ans, t)

        ans=[]
        dfs(root, ans, '')

        return ans
"""
/****************************************************************************/
/****************************************************************************/
"""
"""
            (1)
           /   \
         (2)   (3)
           \
           (5)

They following format are all valid.
First one can be categoried as backtracking. The t is the same t from the begining. t Pass by Reference, so t will getting longer and longer util it has
all the tree nodes in it. So, we need to copy it at proper timing.  
With backtracking, the first append will get [1,2,5], the second append will get [1,3]. If we forget backtracing, the fisrt is [1,2,5], the second is [1,2,5,3].
If we forget copy when append in ans, and forget backtracking, the first and second will be [1,2,5,3]. This is spcecial in Python, in ans, we store the same reference
of t in ans. So, when the code finish running, we get same final t two times. What's more, if we did not forget backtracking, the t will remain [] when finish running
, so, the first and second will be [].

We can use different t every recursive level, just pass a copy of t to DFS function. So that the t in next level of recuresive call is a new t. It will not affect by
other t. The [1,2,5] and [1,3] are different t in its level. So, we can get right answer.
"""
        def dfs(root, ans, t):

            if not root:
                return 
            
            t.append(root.val)
            if root.left is None and root.right is None:
                ans.append(t[:])
            dfs(root.left, ans, t)
            dfs(root.right, ans, t)
            t.pop()

        ans=[]
        dfs(root, ans, [])

# ****************************************************************************
        def dfs(root, ans, t):

            if not root:
                return 
            
            t.append(root.val)
            if root.left is None and root.right is None:
                ans.append(t)
            dfs(root.left, ans, t[:])
            dfs(root.right, ans, t[:])

        ans=[]
        dfs(root, ans, [])
