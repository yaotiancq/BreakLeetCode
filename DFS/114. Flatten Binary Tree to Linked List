# Given the root of a binary tree, flatten the tree into a "linked list":
# The "linked list" should use the same TreeNode class where the right child pointer points 
# to the next node in the list and the left child pointer is always null.
# The "linked list" should be in the same order as a pre-order traversal of the binary tree.
 
# Example 1:
# Input: root = [1,2,5,3,4,null,6]
# Output: [1,null,2,null,3,null,4,null,5,null,6]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""
First, recursively traversal the left sub-tree and right sub-tree;
Second, assemble the left and right sub-tree

One special thing is, the root.right we just assemble on the root.right might be a few nodes.
So, we need to loop to the leaf of the branch before we assmeble the original right arm.

This algorithm should be done from the bottom of the tree, so the post-order is good choice

The logic within the function should be used in every layer
"""
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if not root or root.left is None and root.right is None:
            return

        self.flatten(root.left)
        self.flatten(root.right)

        temp=root.right
        root.right=root.left
        root.left=None

        while root.right:
            root=root.right

        root.right=temp
