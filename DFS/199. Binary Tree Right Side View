# Given the root of a binary tree, imagine yourself standing on the right side of it, 
# return the values of the nodes you can see ordered from top to bottom.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
"""
Using BFS to find the last node in every tree layer.
How to form a tree layer in Queue?
In while loop, start from root, pop out all the current elements in Queue, and append their left and right child in this process.
then, in while loop, we get the layer element in queue every time.
"""
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:

        ans=[]
        if not root:
            return ans

        q=[]
        q.append(root)
        
        while q:
            n=len(q)
            ans.append(q[-1].val)
            for _ in range(n):
                node=q.pop(0)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)

        return ans
