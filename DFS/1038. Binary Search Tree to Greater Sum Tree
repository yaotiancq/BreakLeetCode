# Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key 
# plus the sum of all keys greater than the original key in BST.
# As a reminder, a binary search tree is a tree that satisfies these constraints:
# The left subtree of a node contains only nodes with keys less than the node's key.
# The right subtree of a node contains only nodes with keys greater than the node's key.
# Both the left and right subtrees must also be binary search trees.

# Example 1:
# Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
# Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""
Tree different traversal method: pre-order, in-order, post-order. But there are still changes in here.
in-order:
dfs(root.left)
root.val
dfs(root.right  // start from the leftmost leaf, then its parents, then its right brother

dfs(root.right)
root.val
dfs(root.left)  // start from the rightmost leaf, then its parents, then its left brother. It is the reverse order of left-first in-order traversal.

For pre-order, post-order, the left-first or right-first will have difference too.

Can not use prev=root. 
"""
    def bstToGst(self, root: TreeNode) -> TreeNode:
        
        def postorder(root,prev):
            
            if not root:
                return
            postorder(root.right,prev)
            root.val+=prev.val
            prev.val=root.val
            postorder(root.left,prev)
            
        prev=TreeNode()
        node=root
        postorder(node,prev)

        return root
