# Given the root of a complete binary tree, return the number of the nodes in the tree.
# According to Wikipedia, every level, except possibly the last, is completely filled 
# in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
# Design an algorithm that runs in less than O(n) time complexity.

# Example 1:
# Input: root = [1,2,3,4,5,6]
# Output: 6

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
"""
Find the leftmost node's height and rightmost node's height, If the two height is equal, then the number of nodes is 2**h-1.
If not, then recursively do this process in left sub-tree and right sub-tree.
"""
    def countNodes(self, root: Optional[TreeNode]) -> int:
        
        if not root:
            return 0

        lh,rh=0,0
        l,r=root,root

        while l:
            l=l.left
            lh+=1

        while r:
            r=r.right
            rh+=1

        if lh==rh:
            return 2**lh-1

        return self.countNodes(root.left)+self.countNodes(root.right)+1

"""
DFS
"""
    def countNodes(self, root: Optional[TreeNode]) -> int:
        
        if not root:
            return 0

        return self.countNodes(root.left)+self.countNodes(root.right)+1
