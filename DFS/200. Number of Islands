# Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
# An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
# You may assume all four edges of the grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

class Solution:
"""
Loop over every element in matrix, if meet 1, we set it to 0 and DFS the connect element to set them to 0 too. So,
When we meet 1, we alternate every connected 1 to 0 and cnt add 1. The number of 1 we meet is the number of island.
"""
    def numIslands(self, grid: List[List[str]]) -> int:
        
        def dfs(i,j):

            grid[i][j]='0'

            for di,dj in [[-1,0],[1,0],[0,-1],[0,1]]:
                ni,nj=di+i,dj+j
                if 0<=ni<=len(grid)-1 and 0<=nj<=len(grid[0])-1 and grid[ni][nj]=='1':
                    dfs(ni,nj)
                
        cnt=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=='1':
                    cnt+=1
                    dfs(i,j)

        return cnt
