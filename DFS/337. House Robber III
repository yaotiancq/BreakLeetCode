# The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.

# Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. 
# It will automatically contact the police if two directly-linked houses were broken into on the same night.
# Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.

# Example 1:
# Input: root = [3,2,3,null,3,null,1]
# Output: 7
# Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""
DP problem + DFS
1. In a dp problem, every tree nodes consider multiple situation. We should show multiple output from DFS function for each situation.
2. Multiple recursive call might be too hing in time complexity, we might want use multiple output from DFS to reduce the multiple recursive call.
3. In dp problem, solution come from minimal situation, it is nature to use post-order traversal.
"""
    def rob(self, root: Optional[TreeNode]) -> int:
        
        def dfs(root):

            if not root:
                return 0, 0

            l0, l1 = dfs(root.left)
            r0, r1 = dfs(root.right)

            temp0 = max(l0,l1)+max(r0,r1)
            temp1 = root.val+l0+r0

            return temp0, temp1
                
        return max(dfs(root))

"""
TLE
Too much recursive call, how to modify code to reduce recursive callï¼Ÿ
"""        
class Solution:
    def rob(self, root: Optional[TreeNode]) -> int:
        
        def dfs(root,flag):

            if not root:
                return 0

            if flag==True:
                return root.val+dfs(root.left,False)+dfs(root.right,False)
            else:
                return max(dfs(root.left,True),dfs(root.left,False))+max(dfs(root.right,True),dfs(root.right,False))
                
        return max(dfs(root, True), dfs(root, False))

        
            
