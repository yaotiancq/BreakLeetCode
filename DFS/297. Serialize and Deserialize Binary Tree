# Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a 
# file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

# Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your 
# serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

# Clarification: The input/output format is the same as how LeetCode serializes a binary tree. 
# You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

# Input: root = [1,2,3,null,null,4,5]
# Output: [1,2,3,null,null,4,5]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def dfs(root,ans):

            if not root:
                ans.append('*')
                return
            
            ans.append(str(root.val))
            dfs(root.left, ans)
            dfs(root.right, ans)

        ans=[]
        dfs(root, ans)
        return '#'.join(ans)
            

"""
Should be very careful when using alternable varibles in recursive function. 
"""
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def dfs(data,idx):
            if idx[0]>=len(data):
                return

            if data[idx[0]]=='*':
                idx[0]+=1
                return
            else:
                node=TreeNode(int(data[idx[0]]))
            
            idx[0]+=1
            node.left=dfs(data,idx)
            node.right=dfs(data,idx)

            return node

        data=data.split('#')
        idx=[0]
        return dfs(data,idx)


        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
