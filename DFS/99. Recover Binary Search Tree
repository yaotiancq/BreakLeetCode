# You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake.
# Recover the tree without changing its structure.

# Example 1:
# Input: root = [1,3,null,null,2]
# Output: [3,1,null,null,2]
# Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """

"""
The idea to solve this problem is using in-order traversal to find the location of breaking ascending order.
There are two situation needed to consider:
One is the swap happen at two adjacent node which also adjacent in in-order traversal. Then the disorder will happen in one place:
124356789 The two node are 4 and 3
Another is the swap happen at two node with disjoint in in-order traversal. Then the disorder will happern in two place, and some time the two places is adjacent.
183456729 The two node are 8 and 2
Why? Two nodes are at wrong place which break the ascending order in in-order traversal. Then, the larger node will alway visited first in in-order traversal, then
the smaller one. So, for one place disorder, only two numbers,no more judgement, but in two places disorder, the larger one in first place is the target1, and the 
smaller one in the second place is the target2.
Keep recorder of the larger one when meet first place, and update the smaller one when meet first place or second place.

Python is value propagation except for the alterable object.
If we want to keep record in the recursive process, use list as parameter to record it, or let the recursive function has return and use return value
to cross the layer.
"""
        def inorder(root,node1,node2,prev):
            
            if not root:
                return node1, node2, prev
            
            node1,node2,prev=inorder(root.left,node1,node2,prev)
            
            if prev==None:
                prev=root
            else:
                if root.val<=prev.val:
                    if node1==None:
                        node1=prev
                    node2=root
            prev=root
            
            node1,node2,prev=inorder(root.right,node1,node2,prev)

            return node1,node2,prev

        node1,node2,_=inorder(root,None,None,None)
        node1.val, node2.val = node2.val, node1.val

"""
Using list as parameter to record value we need.
"""
        def inorder(root,node,prev):
            
            if root:
                inorder(root.left,node,prev)
                if root.val<=prev[0].val:
                    if node==[]:
                        node.append(prev[0])
                        node.append(root)
                    else:
                        node.pop()
                        node.append(root)
                prev[0]=root
                inorder(root.right,node,prev)


        node=[]
        prev=[TreeNode(float('-inf'))]

        inorder(root,node,prev)
        node[0].val, node[1].val = node[1].val, node[0].val
