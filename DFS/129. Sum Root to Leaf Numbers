# You are given the root of a binary tree containing digits from 0 to 9 only.
# Each root-to-leaf path in the tree represents a number.
# For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
# Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.
# A leaf node is a node with no children.

# Example 1:
# Input: root = [1,2,3]
# Output: 25
# Explanation:
# The root-to-leaf path 1->2 represents the number 12.
# The root-to-leaf path 1->3 represents the number 13.
# Therefore, sum = 12 + 13 = 25.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""

"""
    def sumNumbers(self, root: Optional[TreeNode]) -> int:

        def dfs(root, t) -> int:
            
            if not root:
                return 0
            
            t=10*t+root.val

            if not root.left and not root.right:
                return t

            return dfs(root.left,t)+dfs(root.right,t)

        return dfs(root,0)

"""
backracking
"""
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        
        def dfs(root, ans, t) -> int:
            
            if not root:
                return ans
            
            t=10*t+root.val

            if not root.left and not root.right:
                ans+=t

            ans=dfs(root.left,ans,t)
            ans=dfs(root.right,ans,t)

            t-=root.val

            return ans

        return dfs(root,0,0)
