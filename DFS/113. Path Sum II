# Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum.
# Each path should be returned as a list of the node values, not node references.
# A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

# Example 1:
# Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
# Output: [[5,4,11,2],[5,8,4,5]]
# Explanation: There are two paths whose sum equals targetSum:
# 5 + 4 + 11 + 2 = 22
# 5 + 8 + 4 + 5 = 22

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""
pre-order + backtracking
"""
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:

        def preorder(root, targetSum, t):

            if not root:
                return

            t.append(root.val)
            if root.left==None and root.right==None and root.val==targetSum:
                ans.append(t[:])
            preorder(root.left, targetSum-root.val, t)
            preorder(root.right, targetSum-root.val, t)
            t.pop()

        ans=[]
        preorder(root, targetSum, [])

        return ans
