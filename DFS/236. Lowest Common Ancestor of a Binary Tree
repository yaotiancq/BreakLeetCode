# Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
# According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T 
#that has both p and q as descendants (where we allow a node to be a descendant of itself).”

# Example 1:
# Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
# Output: 3
# Explanation: The LCA of nodes 5 and 1 is 3.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

"""
Use preorder traversal, visit node from top to bottom.
From root, if p or q is equal root, then, we can say that the lowest common ancestor is root. Because the second one must equal or lower than root.
Then, we try to find such common ancestor using the same logic in left sub-tree and right sub-tree.
If we have returns in both of the tree, meaning that the two nodes are in different sub-tree. Then ,the lowest common is root.
Otherwise, if one of the return is None, the lowest common is the another return.

From the preorder tranversal view, we try to find these two nodes. If we find nodes in seperate sub-trees, we return root.
If we find in left sub-tree, we need to return left sub-tree root, and DFS in left sub-tree. If we find in right sub-tree,
we need to return right sub-tree root. We do this from top to bottom, the return will updated to our answer.
"""
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':

        if not root:
            return 
        
        if p==root or q==root:
            return root

        l=self.lowestCommonAncestor(root.left,p,q)
        r=self.lowestCommonAncestor(root.right,p,q)

        if l:
            if r:
                return root
            else:
                return l
        return r

