# Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
# Return the sum of the three integers.
# You may assume that each input would have exactly one solution.

# Example 1:
# Input: nums = [-1,2,1,-4], target = 1
# Output: 2
# Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

"""
First sort, then keep start, index, end pointer, outter loop is index, inner loop is start and end. Use start-end-pointer to get the possible answer and update the smllest.
"""

def threeSumClosest(self, nums: List[int], target: int) -> int:
    nums.sort()
    n=len(nums)
    diff=float('inf')
    ans=0

    for index in range(1,len(nums)-1):
        start=0
        end=n-1
        while start<index and end>index:
            s=nums[start]+nums[index]+nums[end]
            if abs(s-target)<diff:
                diff=abs(s-target)
                ans=s

            if s==target:
                return target
            elif s>target:
                end-=1
            else:
                start+=1

    return ans
