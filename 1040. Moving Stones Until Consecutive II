# There are some stones in different positions on the X-axis. You are given an integer array stones, 
# the positions of the stones. Call a stone an endpoint stone if it has the smallest or largest position. 
# In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.
# In particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, 
# since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.
# The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).
# Return an integer array answer of length 2 where:

# answer[0] is the minimum number of moves you can play, and
# answer[1] is the maximum number of moves you can play.
 
# Example 1:
# Input: stones = [7,4,9]
# Output: [1,2]
# Explanation: We can move 4 -> 8 for one move to finish the game.
# Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.

# Example 2:
# Input: stones = [6,5,4,3,10]
# Output: [2,3]
# Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game.
# Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.
# Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.

"""
There are two parts to solve this problem.
The max part:
  From the left to the right, move the first element to the first slot which is not immedate adjacent to this element.
For example:
      2,3,*,5,6,*,8   the number of effective slots is 2;
      2,*,4,5,6,*,8   the number of effective slots is 1;  because 2 can not move to the immedate adjacent slot.
The same situation happens when we traverse from right to left. The max number is the max of these two situation.
When traverse from left to right. We only need to traverse from the second position stones[1] to then right most position. And,
We actually do not need to traverse it. stones[-1]-stones[1]+1-(len(stones)-1) will give the number of slots from the second position.
The same method is applied to the right-to-left situation. So, the max number is max(left2right,right2left)

The min part:
  Use slide window to solve this second part. Keep the length of the window to the length of stones. But the length of the window is not 
caculated by right-left+1. It is cacualted by stones[right]-stones[left]+1. We slide the left edge of window to the right, adjust right to keep 
the length of stones to the n. Count the slots in the window. Update the minimal munber of slots when we slide the window. And, we need to consider 
one special situation:
      2,3,4,5,*,*,8
If we do not consider this situation, the minimal number we get is 1. But the actual minimal number is 2. 2 need to move to 9, 8 need to move to 6.
This special situation happen because there are no legal slot for 8 to move to, and our count is based on the ability of movement of 8 to any slot.
How can we catch this special case? No other slot means that the array without the last element is already full and do not have any slot.
right-left+1==len(stones)-1 means the length of the full subarray. stones[right]-stones[left]+1==len(stones)-1 means there are no slot in this subarray.
So, the slot is between the subarray and the last element. It need at least 2 moves. Otherwise, need n-(right-left+1) moves
  Anyway, the stones[right]-stones[left]<n is hard to understand. 
"""
def numMovesStonesII(self, stones: List[int]) -> List[int]:
    stones.sort()
    n=len(stones)

    left=0
    right=0
    minMov=float('inf')
    while left<n:
        if right+1<n and stones[right]-stones[left]<n:
            right+=1
        else:
            if stones[right]-stones[left]>=n:
                right-=1
            if right-left+1==n-1 and stones[right]-stones[left]+1==n-1:
                minMov=min(minMov,2)
            else:
                minMov=min(minMov,n-(right-left+1))
            if right==n-1 and stones[right]-stones[left]+1<n:
                break
            left+=1

    maxMov=max(stones[-1]-stones[1]-n+2,stones[-2]-stones[0]-n+2)

    return [minMov,maxMov]
