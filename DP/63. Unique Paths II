# You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
# The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
# An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
# Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
# The testcases are generated so that the answer will be less than or equal to 2 * 109.

# Example 1:
# Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
# Output: 2
# Explanation: There is one obstacle in the middle of the 3x3 grid above.
# There are two ways to reach the bottom-right corner:
# 1. Right -> Right -> Down -> Down
# 2. Down -> Down -> Right -> Right

class Solution:

"""
o → o
↓   ↓
o → o

Normally, if we do not consider the obstacles, dp[i][j]=dp[i-1][j]+dp[i][j-1]
But, if there is an obstacle in [i,j], then, dp[i][j]=0, because there is no way to get there.
Otherwise we can still use dp[i][j]=dp[i-1][j]+dp[i][j-1] to denote the ways we can get [i,j]
"""
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        
        dp=[[0]*len(obstacleGrid[0]) for _ in range(len(obstacleGrid))]

        j=0
        while j<len(obstacleGrid[0]):
            if obstacleGrid[0][j]!=1:
                dp[0][j]=1
            else:
                break
            j+=1

        i=0
        while i<len(obstacleGrid):
            if obstacleGrid[i][0]!=1:
                dp[i][0]=1
            else:
                break
            i+=1

        for i in range(1,len(obstacleGrid)):
            for j in range(1,len(obstacleGrid[0])):
                if obstacleGrid[i][j]==1:
                    dp[i][j]=0
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1] 

        return dp[-1][-1]


"""
We only need the [0][0] as the initial value.
"""
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        
        dp=[[0]*len(obstacleGrid[0]) for _ in range(len(obstacleGrid))]

        if obstacleGrid[0][0]!=1:
            dp[0][0]=1

        for i in range(len(obstacleGrid)):
            for j in range(len(obstacleGrid[0])):
                if obstacleGrid[i][j]==1:
                    dp[i][j]=0
                elif i==0 and j!=0:
                    dp[i][j]=dp[i][j-1]
                elif i!=0 and j==0:
                    dp[i][j]=dp[i-1][j]
                elif i!=0 and j!=0:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]

        return dp[-1][-1]
