# Given an integer n, return the number of structurally unique BST's (binary search trees)
# which has exactly n nodes of unique values from 1 to n.

# Example 1:
# Input: n = 3
# Output: 5

# Example 2:
# Input: n = 1
# Output: 1

class Solution:

"""
The most important fact is the number of structurally unique BST with successive number node is decided by the number of nodes.
1,2,3 and 2,3,4 and 3,4,5 have the same number of unique BST structure.

The second fact we should know is that the number of unique BST tree with a specified root is decided by the number of 
its left sub-tree multiply the number of its right sub-tree.
DP[0]=1 has no meaning, it is just for the convenience of calculation.

n=1  1  dp[1]=1
n=2  -/1/2: 1*1=1 1/2/-: 1*1=1   #dp[2]=1+1=2
n=3  -/1/23: 1*2=2 1/2/3: 1*1=1 12/3/-: 2*1=2    #dp[3]=2+1+2=5
n=4  -/1/234: 1*5=5 1/2/34: 1*2=2 12/3/4: 2*1=2 123/4/-: 5*1=5     #dp[4]=5+2+2+5=14
"""
    def numTrees(self, n: int) -> int:
        
        dp=[0]*(n+1)

        dp[0]=1
        dp[1]=1
        
        if n<=1:
            return 1

        for i in range(2,n+1):
            for j in range(i):
                left=j-0
                right=i-1-j
                dp[i]+=dp[left]*dp[right]

        return dp[n]
