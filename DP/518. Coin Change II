# You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
# Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
# You may assume that you have an infinite number of each kind of coin.
# The answer is guaranteed to fit into a signed 32-bit integer.

# Example 1:
# Input: amount = 5, coins = [1,2,5]
# Output: 4
# Explanation: there are four ways to make up the amount:
# 5=5
# 5=2+2+1
# 5=2+1+1+1
# 5=1+1+1+1+1

class Solution:

"""
Unbounded Snapsack Problem.
Unbounded snapsack problem is similar as 0/1 snapsack problem. The only difference is we can choose infinite number of same item in candidate. In 0/1 snapsack problem,
we can only choose or not.
In 0/1 snapsack problem, in order to make suer that we do not select the same item more than once, we loop capacity j reversely. In unbounded snapsack problem, we don't
have such limitations, so we just loop capacity j normal order.

The number of combination, dp[0]=1, dp[j]+=dp[j-coin]
"""
    def change(self, amount: int, coins: List[int]) -> int:
        
        dp=[0]*(amount+1)
        dp[0]=1

        for coin in coins:
            for j in range(coin,amount+1):
                dp[j]+=dp[j-coin]

        return dp[-1]
