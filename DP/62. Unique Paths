# There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
# The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
# Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
# The test cases are generated so that the answer will be less than or equal to 2 * 109.

# Example 1:
# Input: m = 3, n = 7
# Output: 28

class Solution:

"""
Apparently, the possible unique path at position [i][j] is decided by previous choice of path.
The previous location of grid[i][j] could be grid[i-1][j] or grid[i][j-1].
So, if we let dp[i][j] be the number of possible unique paths we get position [i][j],
dp[i][j]=dp[i-1][j]+dp[i][j-1]

For 2D dp problem, the initial status could be i==0 or j==0. For i=0, dp[0][j]=dp[0][0], because there is only one route for robot to get [0][j] from [0][0].
"""
    def uniquePaths(self, m: int, n: int) -> int:
       
        dp=[[0]*n for _ in range(m)]

        dp[0][0]=1
        for i in range(m):
            dp[i][0]=dp[0][0]
        for j in range(n):
            dp[0][j]=dp[0][0]

        for i in range(1,m):
            for j in range(1,n):
                dp[i][j]=dp[i-1][j]+dp[i][j-1]

        return dp[m-1][n-1]


import math
class Solution:

"""
It can be a math problem. Robot has m-1 more downward steps to go and n-1 more rightward steps to go.
The combination of different timing of downward and rightward steps is a unique path.
There are two thinking for this math.
One, P(n+m-2)/P(n-1)*P(m-1)
Two, C(m+n-2, m-1)  total m+n-2 steps, choose any m-1 steps as downward steps.
"""
    def uniquePaths(self, m: int, n: int) -> int:
       
        return math.comb(m+n-2,m-1)


    def uniquePaths(self, m: int, n: int) -> int:
       
        return math.factorial(m+n-2)//(math.factorial(m-1)*math.factorial(n-1))
        
