# Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.
# Return the maximum product you can get.

# Example 1:
# Input: n = 2
# Output: 1
# Explanation: 2 = 1 + 1, 1 × 1 = 1.

# Example 2:
# Input: n = 10
# Output: 36
# Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.

class Solution:

"""
We need to decide whether n is worthy to split into 2 or more integers. From my analysis, when n>=5, spliting will get larger result.
n=1, res=1
n=2, res=1*1=1
n=3, res=1*2=2,2*1=2
n=4, res=1*3=3,2*2=4,3*1=3
n=5, res=1*4=4,2*3=6,3*2=6,4*1=4
...
We need to split integer n into at least 2 number. When the two integer are all smaller than 5, we don't need to split any of them.
Otherwise, we just need to split the one which is larger than 4. So that we can get largest value. 
The dp[i] is used to store the largest value we get. When we split the n, we can decide whether to loop up dp or not, smaller i in dp must 
come before i, then, this deduction relationship is happening.
As we can see above, we don't need to loop every split number from 1 to n-1, we just need to loop from 1 to n//2+1. The end must be n//2+1, otherwise,
the n//2 will not be included.
"""
    def integerBreak(self, n: int) -> int:
        
        dp=[0]*(n+1)
        dp[1]=1

        for i in range(2,n+1):
            for j in range(1,i//2+1):
                if j<5 and i-j<5: 
                    dp[i]=max(dp[i],j*(i-j))
                elif j>=5 and i-j<5:
                    dp[i]=max(dp[i],dp[j]*(i-j))
                elif j<5 and i-j>=5:
                    dp[i]=max(dp[i],j*dp[i-j])
                else:
                    dp[i]=max(dp[i],dp[j]*dp[i-j])
        return dp[n]


"""
Idea is same, but this one is more concise and fast.
For a number n, we have two choice, split into 2 numbers or more than 2 numbers.
j*(i-j) means we don't split n into more than 2 numbers. j*dp[i-j] means we split n into more than 2 numbers.

Why we could have only two choice?
That is because dp[i-j] might have multiple split. For example, 14=3+11=4+5+6=4+2+3+3+3. We just need to look at dp[11] without considering that 11 will be splited
into multiple numbers. dp[i-j] means more than 2 numbers.
Anoher trick is that, we do not need to consider dp[j] in the loop. Because j are looping start from 1.  Considering 2+12 and 5+9, we might use 2*dp[12] and dp[5]*
dp[9] to get possible largest result. Becase we know that, starting from 5, we can get larger result.  But we do not need to do this. 
Because dp[5]*dp[9]=2*dp[12].
We can prove that.
According our dp definition, dp[i] is the largest result we can get at number i.
So, dp[9] is the largest value at number 9, dp[12] is the largest value at number 12.
12=3+9, from our early analysis, if we want to get largest value, this should be 3*dp[9], 3 is the largest , dp[9]>9. 
Then, 2*dp[12] = 2*3*dp[9]=dp[5]*dp[9].

That is my observation: 
If j start from i and loop to n//2， dp[j] when j>=5 is included in previous choice, dp[i-j] can always split part which join j to form dp[j]
"""
    def integerBreak(self, n: int) -> int:
        
        dp=[0]*(n+1)
        dp[1]=1

        for i in range(2,n+1):
            for j in range(1,i//2+1):
                dp[i]=max(dp[i], max(j*(i-j),j*dp[i-j]))
        return dp[n]
