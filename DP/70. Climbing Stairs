# You are climbing a staircase. It takes n steps to reach the top.
# Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

# Example 1:
# Input: n = 2
# Output: 2
# Explanation: There are two ways to climb to the top.
# 1. 1 step + 1 step
# 2. 2 steps

class Solution:

"""
In this problem, apparently, the ways we step on n staircase is decided by previous status.
We can either step on n from n-1 or n-2(1 or 2 steps). So, if we have f(n-1) ways and f(n-2) ways to step on n-1 and n-2.
Then, f(n)=f(n-1)+f(n-2). That is our deduction relationship.

"""
    def climbStairs(self, n: int) -> int:
        
        dp=[0]*(n+1)

        if n<=1:
            return 1

        dp[0]=1
        dp[1]=1

        for i in range(2,n+1):
            dp[i]=dp[i-2]+dp[i-1]

        return dp[-1]
