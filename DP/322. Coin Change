# You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
# Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
# You may assume that you have an infinite number of each kind of coin.

# Example 1:
# Input: coins = [1,2,5], amount = 11
# Output: 3
# Explanation: 11 = 5 + 5 + 1

# Example 2:
# Input: coins = [2], amount = 3
# Output: -1

# Example 3:
# Input: coins = [1], amount = 0
# Output: 0

class Solution:

"""
Unbounded snapsack problem
dp[0]=0 because amount=0 make the possible changes is 0.
Minimal is similar as maximal value problem, change the deduction relation to min()
Initial value except 0-th will all be float('inf').
"""
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        dp=[float('inf')]*(amount+1)
        dp[0]=0

        for coin in coins:
            for j in range(coin, amount+1):
                dp[j]=min(dp[j],dp[j-coin]+1)
            
        return dp[-1] if dp[-1]!=float('inf') else -1
