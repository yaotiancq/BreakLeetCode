# Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of 
# all the elements in the subarray is strictly less than k.

# Example 1:
# Input: nums = [10,5,2,6], k = 100
# Output: 8
# Explanation: The 8 subarrays that have product less than 100 are:
# [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
# Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.


"""
What is most important about algorithm design is how to maintain the left and right pointer, that is 
to say how to maintain the window. When to count.
In this problem, we keeep a length of window to make sure that in the window , the prod is less than k.
We keep moving the right side of the window, and monitor the prod of the windwo to make desision where 
we should update the left side of the window. We can see that we dont need to update cnt until the pro is 
more than k. And we notice that we need a loop to make sure the left side of window is in the right place(because
the nums[i] can be very large, and we need to shrink much more than just 1 position)
"""
def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
    cnt=0
    prod=1
    j=0
    i=0

    if k<=1:
        return 0

    while i<len(nums):    
        prod*=nums[i]
        while prod>=k:
            prod//=nums[j]
            j+=1
        cnt+=i-j+1
        i+=1

    return cnt
