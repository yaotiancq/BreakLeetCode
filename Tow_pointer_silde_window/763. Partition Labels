# You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.
# Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
# Return a list of integers representing the size of these parts.

# Example 1:
# Input: s = "ababcbacadefegdehijhklij"
# Output: [9,7,8]
# Explanation:
# The partition is "ababcbaca", "defegde", "hijhklij".
# This is a partition so that each letter appears in at most one part.
# A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

"""
First, record the frequency of each character.  Second, loop over s again, and keep tracking the ramain character is s, we need a visited to record 
which character has been visited. Sum up all the visited character's frequency. When the sum is equal to 0, then we can say that the character before 
position i have been visited and no copy left in the remain s.
O(n*26) 
"""
def partitionLabels(self, s: str) -> List[int]:
    ans=[]
    d=[0]*128
    visited=[0]*128
    lastIndex=-1

    for i in range(len(s)):
        d[ord(s[i])]+=1

    for i in range(len(s)):
        d[ord(s[i])]-=1
        visited[ord(s[i])]=1
        s1=0
        for j in range(97,123):
            if visited[j]==1:
                s1+=d[j]
        if s1==0:
            ans.append(i-lastIndex)
            lastIndex=i
            
    return ans

"""
记录每一种字符出现的最左侧索引和最右侧索引，然后就可以抛开原来的序列，直接就记录索引的字典来解决问题。
从第二个字符开始，如果第二个字符的最左侧索引处于前一个区间的中间，则说明这个字符是属于这个子序列的，
那么这个字符的最右侧索引值要参与更新这个子序列的最右侧索引值。
"""
def partitionLabels(self, s: str) -> List[int]:
    d={}
    for i in range(len(s)):
        if s[i] not in d:
            d[s[i]]=[i,i]
        else:
            d[s[i]][1]=i
    L=[]
    for key in d:
        if not L:
            L.append(d[key])
            continue
        if d[key][0]>L[-1][0] and d[key][0]<L[-1][1]:
            L[-1][1]=max(L[-1][1],d[key][1])
        else:
            L.append(d[key])
    return [r-l+1 for [l,r] in L]
            
