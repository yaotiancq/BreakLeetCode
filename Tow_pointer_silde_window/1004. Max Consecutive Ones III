# Given a binary array nums and an integer k, return the maximum number of consecutive 1's 
# in the array if you can flip at most k 0's.

# Example 1:
# Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
# Output: 6
# Explanation: [1,1,1,0,0,1,1,1,1,1,1]
# Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.


"""
Slide window, the number of 0 is the key to move the left pointer.
"""
def longestOnes(self, nums: List[int], k: int) -> int:
    count=k
    ans=0
    l=0
    for r in range(len(nums)):
        if nums[r]==0:
            count-=1
        if count>=0:
            ans=max(ans,r-l+1)
        if count<0:
            if nums[l]==0:
                count+=1
            l+=1
    return ans


"""
Do not need to update ans, the r-l+1 will keep the lagest number the window can be expanded.
"""
def longestOnes(self, nums: List[int], k: int) -> int:
    count=k
    l=0
    for r in range(len(nums)):
        if nums[r]==0:
            count-=1
        if count<0:
            if nums[l]==0:
                count+=1
            l+=1
    return r-l+1
