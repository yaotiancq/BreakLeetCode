# You may recall that an array arr is a mountain array if and only if:
# arr.length >= 3
# There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
# arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
# arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
# Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

# Example 1:
# Input: arr = [2,1,4,7,3,2,5]
# Output: 5
# Explanation: The largest mountain is [1,4,7,3,2] which has length 5.


"""
Find the top of mountain and loop from there. Find the left edge and right edge of mountain.
"""
def longestMountain(self, arr: List[int]) -> int:      
    ans=0
    for top in range(1,len(arr)-1):
        if arr[top-1]<arr[top] and arr[top]>arr[top+1]:
            l, r = top, top

            while l>0 and arr[l]>arr[l-1]:
                l-=1

            while r+1<len(arr) and arr[r]>arr[r+1]:
                r+=1

            ans = max(ans, r-l+1)

    return ans

"""
Loop over the arr, and set a flag to True and set j=i when there is a mountain top, then detect the right edge of the mountain.
when reach the right edge of the mountain, use j to loop back to find the left edge of the mountain
"""
def longestMountain(self, arr: List[int]) -> int:      
    ans=0
    mountainTop=False
    for i in range(len(arr)):
        if i>0 and i<len(arr)-1 and arr[i]-arr[i+1]>0 and arr[i-1]-arr[i]<0:
            mountainTop=True
            j=i
        if mountainTop and (i==len(arr)-1 and arr[i-1]>arr[i] or i<len(arr)-1 and arr[i-1]>arr[i] and arr[i]<=arr[i+1]):
            while j>0 and arr[j]>arr[j-1]:
                j-=1
            ans=max(ans, i-j+1)
            mountainTop=False
    return ans
