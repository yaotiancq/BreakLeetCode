# Given an integer array nums that may contain duplicates, return all possible subsets
# (the power set).
# The solution set must not contain duplicate subsets. Return the solution in any order.

# Example 1:
# Input: nums = [1,2,2]
# Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

# Example 2:
# Input: nums = [0]
# Output: [[],[0]]

class Solution:

"""
sort+loop from larger element+ keep layer element unique
"""
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        
        def backtracking(ans,idx,t):

            ans.append(t[:])
            if len(t)==len(nums):
                return

            visited={}
            for i in range(idx,len(nums)):
                if nums[i] not in visited:
                    visited[nums[i]]=1
                    t.append(nums[i])
                    backtracking(ans,i+1,t)
                    t.pop()

        ans=[]
        nums.sort()
        backtracking(ans,0,[])

        return ans
