# A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. 
# There are various applications of this data structure, such as autocomplete and spellchecker.

# Implement the Trie class:

# Trie() Initializes the trie object.
# void insert(String word) Inserts the string word into the trie.
# boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
# boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.

"""
trie data structure.
Every node of this trie tree is a TrieNode, which has at leat two instance varibles. One is self.chidren={}, which is used to store next level
TrieNode to form a tree. Another is end flag self.is_end_of_word which is used to flag the end of word in words list.

insert: when insert a word, loop over each char in word and create TrieNode and add it to parent node's self.children. The parent node starts from
root. When meet the end of the word, flag the end flag at the last char node.
search: when search a word, loop over each char and compare with the node down along the trie tree.
"""


class TrieNode:
    def __init__(self):
        self.children={}
        self.isEndOfWord=False

class Trie:

    def __init__(self):
        self.root=TrieNode()

    def insert(self, word: str) -> None:
        node=self.root
        for c in word:
            if c not in node.children:
                node.children[c]=TrieNode()
            node=node.children[c]
        node.isEndOfWord=True

    def search(self, word: str) -> bool:
        node=self.root
        for c in word:
            if c not in node.children:
                return False
            node=node.children[c]
        return node.isEndOfWord

    def startsWith(self, prefix: str) -> bool:
        node=self.root
        for c in prefix:
            if c not in node.children:
                return False
            node=node.children[c]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
