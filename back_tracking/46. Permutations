# Given an array nums of distinct integers, return all the possible permutations. 
# You can return the answer in any order.

# Example 1:
# Input: nums = [1,2,3]
# Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

# Example 2:
# Input: nums = [0,1]
# Output: [[0,1],[1,0]]

class Solution:

"""
Backtracking is used to solve permutation(排列), combination(组合),  cutting(切割), subset(子集), chessboard(N-Queens n皇后，Sudoku 数独)
Such problem as above need DFS and brute force to search all answer space in O(n!) time complexity.
Backtracking has its standard format:
def backtracking(multiple variables):
    if stop_condition:
        result_collection
        return
    for loop to traverse current layer elements:
        processing current layer nodes
        recursively call backtracking(multiple variables)
        cancel current layer nodes' processing -- backtracking
    return

There are few special things:
One is using idx to record the length of the t, it can be replaced by len(t).
Second is that when we collect result, we need to copy list in python, otherwise the list will be set to [] when the 
    recursive function return, and the result will lost.
Third is that the t in upper layer is different with the t in lower layer when we recursively call backtracking function.
    In python function, the variable is value propagation, not address propagation. So, the t.pop() will pop out the element
    which t.append() pushed in in the previous code.
Fourth, the backtracking process is the key idea to understand the brute force search process.
"""
    def permute(self, nums: List[int]) -> List[List[int]]:
        
        def backtracking(nums,ans,t,idx):
            if idx==len(nums):
                ans.append(t[:])
                return 
            for i in range(len(nums)):
                if nums[i] not in t:
                    t.append(nums[i])
                    backtracking(nums,ans,t,idx+1)
                    t.pop()
            return 

        ans=[]
        backtracking(nums,ans,[],0)

        return ans

"""
Using used to help to record the usage of each element, if not used, then we can use. Otherwise, it can not be used.
This is better way to decide whether an element should be used in current layer.
"""
    def permute(self, nums: List[int]) -> List[List[int]]:
        
        def backtracking(nums,ans,t):
            if len(t)==len(nums):
                ans.append(t[:])
                return 
            for i in range(len(nums)):
                if not used[i]:
                    used[i]=True
                    t.append(nums[i])
                    backtracking(nums,ans,t)
                    t.pop()
                    used[i]=False
                    
        ans=[]
        used=[False]*len(nums)
        backtracking(nums,ans,[])

        return ans
