# Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

# Only numbers 1 through 9 are used.
# Each number is used at most once.
# Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
# Example 1:

# Input: k = 3, n = 7
# Output: [[1,2,4]]
# Explanation:
# 1 + 2 + 4 = 7
# There are no other valid combinations.
# Example 2:

# Input: k = 3, n = 9
# Output: [[1,2,6],[1,3,5],[2,3,4]]
# Explanation:
# 1 + 2 + 6 = 9
# 1 + 3 + 5 = 9
# 2 + 3 + 4 = 9
# There are no other valid combinations.

class Solution:

"""
Combination is special case of permutaion.
Sort nums and start loop at larger element at lower layer.
Stop condition in this problem is either k<=0 or target<=0.
Stop condition is when the DFS should stop and return. It might return with successful search result and might return with failure.
But, it must have a stop logic which make the backtracking function determinately stop at some future point, or it will be a endless loop.
"""
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        
        def backtracking(nums, target, ans, k, m, t):
            if k<=0 or target<=0:
                if k==0 and target==0:
                    ans.append(t[:])
                return 
            
            for i in range(m, 9):
                t.append(nums[i])
                backtracking(nums, target-nums[i], ans, k-1, i+1, t)
                t.pop()
                

        nums=[i+1 for i in range(9)]
        ans=[]
        backtracking(nums, n, ans, k, 0, [])

        return ans
