# The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
# Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
# Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively

# Example 1:
# Input: n = 4
# Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
# Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

class Solution:

"""
N-Queens.
Every queen decide the valid location of the following queens. So, this is a DFS problem.
We can simplify this problem by putting each queen at exact one row. So, the same row contradiction is solved.
For each queen, we decide the col it should be placed. If first queen is placed at 0-th col, the second queen will not be placed at 0-th and 1-th col, in
order to meet the col contradiction and diag contradiction.
The key is to design the isDiagAvailable() function. the i-th row choice is dicided by 0th to (i-1)th row's choice. So, we need a record to record the choice.
Fortunately, we have layer recoder t to record the choice. We loop over each row's choice, the forbid location should be t[i]+row-i and t[i]-(row-i).

What is more, we can use this judgement function to include the col contradction and remove the colUsed list to make code simpler. But, using colUsed is faster.
"""
    def solveNQueens(self, n: int) -> List[List[str]]:

        def isDiagAvailable(row,col,t):
            for i in range(len(t)):
                if col==t[i]+row-i or col==t[i]-(row-i): # or col==t[i] this is slower.
                    return False
            return True

        def backtracking(ans,n,row,t):
            if len(t)==n:
                st=[]
                for i in range(len(t)):
                    temp=['.']*n
                    temp[t[i]]='Q'
                    temp=''.join(temp)
                    st.append(temp)
                ans.append(st[:])
                return

            for col in range(n):
                if not colUsed[col] and isDiagAvailable(row,col,t):
                    colUsed[col]=True
                    t.append(col)
                    backtracking(ans,n,row+1,t)
                    t.pop()
                    colUsed[col]=False

        ans=[]
        colUsed=[False]*n
        backtracking(ans,n,0,[])

        return ans
