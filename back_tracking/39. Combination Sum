# Given an array of distinct integers candidates and a target integer target, 
# return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
# The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
# frequency
#  of at least one of the chosen numbers is different.
# The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

# Example 1:
# Input: candidates = [2,3,6,7], target = 7
# Output: [[2,2,3],[7]]
# Explanation:
# 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
# 7 is a candidate, and 7 = 7.
# These are the only two combinations.

# Example 2:
# Input: candidates = [2,3,5], target = 8
# Output: [[2,2,2,2],[2,3,3],[3,5]]

class Solution:

"""
Combination is basically the result of pruning of permutation. So, it can use the basic format of backtracking.
Different from permutation, [1,1,2],[1,2,1] and [2,1,1] are the same result in combination.
How can we ignore those same results?
If we sort the candidates first, and DFS in the candidates which is equal or larger than the previous layer, 
we can make sure that every result we collect is in ascending order. There is only one combination in ascending
order.
[1,1,2] is the only result we collect from DFS. [1,2,1] and [2,1,1] are all violations of our pruning rule.
"""
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        
        def backtracking(candidates, target, ans, k, t):
            if target<=0:
                if target==0:
                    ans.append(t[:])
                return

            for i in range(k, len(candidates)):
                t.append(candidates[i])
                backtracking(candidates, target-candidates[i], ans, i, t)
                t.pop()

        ans=[]
        candidates.sort()
        backtracking(candidates, target, ans, 0, [])

        return ans
