# Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.
# An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

# Example 1:
# Input: s = "cbaebabacd", p = "abc"
# Output: [0,6]
# Explanation:
# The substring with start index = 0 is "cba", which is an anagram of "abc".
# The substring with start index = 6 is "bac", which is an anagram of "abc".

"""
utilizes a frequency array freq[256] to record the frequency of each character's occurrence. 
As the left boundary of the sliding window moves to the right, the count of passed elements increases (i.e., count+=1). 
Similarly, as the right boundary of the sliding window moves to the right, the count of passed elements decreases (i.e., count-=1).
When the difference between the right and left boundaries is len(p), it needs to be checked whether each element has been used once. 
The specific procedure is as follows: every time a valid element is encountered, count is decremented. 
The initial value of count is len(p). When every element meets the requirements, and the difference between the right and left boundaries is len(p), 
count will also be equal to 0. If there are elements in the interval that do not meet the requirements (i.e., freq < 0 or nonexistent elements), 
when the interval reaches len(p), count cannot be reduced to 0. As the interval moves to the right, 
the left boundary will start to increment count. Only when the left boundary moves out of these invalid elements, 
can count reach 0, indicating that an anagram has been found.
d[ord(s[j])]+=1 need to out of if d[ord(s[j])]>=0: because target character might become negative, for example, continuous two same target character.
So, It must substract when right point access it and addition when left point access for every character.
Should remenber that first update i then update j
"""
def findAnagrams(self, s: str, p: str) -> List[int]:
    count=len(p)
    j=0
    d=[0]*128
    ans=[]

    for c in p:
        d[ord(c)]+=1

    for i in range(len(s)):
        if d[ord(s[i])]>0:
            count-=1
        d[ord(s[i])]-=1

        if i-j+1==len(p):
            if count==0:
                ans.append(j)
            if d[ord(s[j])]>=0:
                count+=1
            d[ord(s[j])]+=1
            j+=1
    return ans

"""
Hash is a good way to ignore the order of sequence. The chance of same summary of different group of character is low though it is 
not a strict way. I think.
"""

def findAnagrams(self, s: str, p: str) -> List[int]:
    ls,lp,hs,hp,ans=len(s),len(p),0,0,[]

    if ls<lp:
        return []

    for i in range(lp):
        hs+=hash(s[i])
        hp+=hash(p[i])
    
    if hs==hp:
        ans.append(0)

    for i in range(lp,ls):
        hs+=(hash(s[i])-hash(s[i-lp]))
        if hs==hp:
            ans.append(i-lp+1)
    return ans
