# Given the head of a singly linked list, return the middle node of the linked list.
# If there are two middle nodes, return the second middle node.

# Example 1:
# Input: head = [1,2,3,4,5]
# Output: [3,4,5]
# Explanation: The middle node of the list is node 3.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next


"""
1->2->3->4->5
1->2->3->4->5->6
Loop condition: fast!=None and fast.next!=None
fast!=None equal to fast, fast.next!=None equal to fast.next
"""
def middleNode(head):
    fast=head
    slow=head
    while fast and fast.next:
        slow=slow.next
        fast=fast.next.next
    return slow
