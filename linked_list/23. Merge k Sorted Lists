# You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
# Merge all the linked-lists into one sorted linked-list and return it.

 
# Example 1:
# Input: lists = [[1,4,5],[1,3,4],[2,6]]
# Output: [1,1,2,3,4,4,5,6]
# Explanation: The linked-lists are:
# [
#   1->4->5,
#   1->3->4,
#   2->6
# ]
# merging them into one sorted list:
# 1->1->2->3->4->4->5->6

# Example 2:
# Input: lists = []
# Output: []

# Example 3:
# Input: lists = [[]]
# Output: []

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def merge2Lists(self, list1, list2):
        if list1==None:
            return list2
        if list2==None:
            return list1

        if list1.val <= list2.val:
            list1.next=self.merge2Lists(list1.next, list2)
            return list1
        else:
            list2.next=self.merge2Lists(list1, list2.next)
            return list2

    def merge2Lists2(self, list1, list2):
        new_head=ListNode()
        curr=new_head
        while list1 or list2:
            if list1==None and list2!=None:
                curr.next=list2
                list2=list2.next
                curr=curr.next
                continue
            if list2==None and list1!=None:
                curr.next=list1
                list1=list1.next
                curr=curr.next
                continue
            if list1.val <= list2.val:
                curr.next=list1
                list1=list1.next
            else:
                curr.next=list2
                list2=list2.next
            curr=curr.next
        return new_head.next

"""
Use D&C method to make merge faster.
"""
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:

        if not lists:
            return None
        if len(lists)==1:
            return lists[0]

        mid=len(lists)//2
        list1=self.mergeKLists(lists[:mid])
        list2=self.mergeKLists(lists[mid:])
        return self.merge2Lists2(list1,list2)
