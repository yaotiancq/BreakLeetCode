# You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.
# You are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.
# You need to assign each city with an integer value from 1 to n, where each value can only be used once. 
# The importance of a road is then defined as the sum of the values of the two cities it connects.
# Return the maximum total importance of all roads possible after assigning the values optimally.

 

# Example 1:
# Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
# Output: 43
# Explanation: The figure above shows the country and the assigned values of [2,4,5,3,1].
# - The road (0,1) has an importance of 2 + 4 = 6.
# - The road (1,2) has an importance of 4 + 5 = 9.
# - The road (2,3) has an importance of 5 + 3 = 8.
# - The road (0,2) has an importance of 2 + 5 = 7.
# - The road (1,3) has an importance of 4 + 3 = 7.
# - The road (2,4) has an importance of 5 + 1 = 6.
# The total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.
# It can be shown that we cannot obtain a greater total importance than 43.

class Solution:

"""
Graph+greedy

The node whose degree is largest should get largest number n, the smaller degree should get smaller number.
This is greedy.
So, we first get the degree of each node, and sort these node by their degree. Then, assign them with number according to their degree.
"""
    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:
        
        degree={k:0 for k in range(n)}

        for i in range(len(roads)):
            degree[roads[i][0]]+=1
            degree[roads[i][1]]+=1
        
        sorted_dict=dict(sorted(degree.items(), key=lambda item:item[1]))
        
        i=1
        for key in sorted_dict:
            sorted_dict[key]=i
            i+=1

        ans=0
        for i in range(len(roads)):
            ans+=sorted_dict[roads[i][0]]+sorted_dict[roads[i][1]]

        return ans

"""
Degree could be saw as the times it show in roads. In roads, for each roads, we add two nodes' number. That equal to node's mumber mulple times it show in roads.
So the result equal to sum(degree*number)
"""
    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:
        
        degree=[0]*n

        for i in range(len(roads)):
            degree[roads[i][0]]+=1
            degree[roads[i][1]]+=1

        degree.sort()

        i=1
        ans=0
        for d in degree:
            ans+=d*i
            i+=1

        return ans
